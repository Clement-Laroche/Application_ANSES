load("resmod_prosulf2.Rdata")
load("Station_app.Rdata")
load("MultRank_RealData.Rdata")
load("App_prosulfo.Rdata")
save(geo,
input,
map_eau,
map_reg_her,
ts5,
ts3,
ts4,
tstp_mod3,tstp_mod4,
tstrt_mod3,tstrt_mod4,
file = "Data_prosulfocarb.Rdata")
load("Data_prosulfocarb.Rdata")
UStatcens <- function(data,cens,t)
{
n <- length(data)
datainf <- rep(0,n)
datainf[cens == 1] <- data[cens == 1]
cdfinf <- ecdf(x = datainf)
cdf <- ecdf(data)
U <- 0
for(i in 1:t)
{
for(j in (t+1):n)
{
U <- U + (data[i]<=datainf[j])-(data[j]<=datainf[i])
}
}
U <- U/sqrt(n*t*(n-t))
V <- mean((cdf(datainf)+cdfinf(data-10^-10)-1)^2)
return(U^2/V)
}
save(geo,
input,
map_eau,
map_reg_her,
ts5,
ts3,
ts4,
tstp_mod3,tstp_mod4,
tstrt_mod3,tstrt_mod4,
Ustatcens,
file = "Data_prosulfocarb.Rdata")
save(geo,
input,
map_eau,
map_reg_her,
ts5,
ts3,
ts4,
tstp_mod3,tstp_mod4,
tstrt_mod3,tstrt_mod4,
Ustatcens(),
file = "Data_prosulfocarb.Rdata")
save(geo,
input,
map_eau,
map_reg_her,
ts5,
ts3,
ts4,
tstp_mod3,tstp_mod4,
tstrt_mod3,tstrt_mod4,
UStatcens(),
file = "Data_prosulfocarb.Rdata")
save(geo,
input,
map_eau,
map_reg_her,
ts5,
ts3,
ts4,
tstp_mod3,tstp_mod4,
tstrt_mod3,tstrt_mod4,
UStatcens,
file = "Data_prosulfocarb.Rdata")
map_eau <- st_transform(x = map_eau,crs = 4326)
map_reg_her <- st_transform(x = map_reg_her,crs = 4326)
library(shiny)
library(udunits2)
library(dplyr)
library(sp)
library(sf)
library(zoo)
library(Rcpp)
library(lubridate)
library(leaflet)
library(ggplot2)
library(RColorBrewer)
library(data.table)
library(leafpop)
map_eau <- st_transform(x = map_eau,crs = 4326)
map_reg_her <- st_transform(x = map_reg_her,crs = 4326)
data <- data.table(input)
ts3 <- sort(ts3)+1
ts3 <- c(ts3,nrow(data))
ts4 <- sort(ts4)+1
ts4 <- c(ts4,nrow(data))
ts5 <- ts5[[13]]
tstp_mod5 <- c(data$d[ts5],data$d[nrow(data)])
ts5 <- ts5+1
ts5 <- c(1,ts5)
tstrt_mod5 <- data$d[ts5]
ts5 <- c(ts5,nrow(data))
rm(input)
load("resmod_prosulf2.Rdata")
load("Station_app.Rdata")
load("MultRank_RealData.Rdata")
load("App_prosulfo.Rdata")
map_eau <- st_transform(x = map_eau,crs = 4326)
map_reg_her <- st_transform(x = map_reg_her,crs = 4326)
UStatcens <- function(data,cens,t)
{
n <- length(data)
datainf <- rep(0,n)
datainf[cens == 1] <- data[cens == 1]
cdfinf <- ecdf(x = datainf)
cdf <- ecdf(data)
U <- 0
for(i in 1:t)
{
for(j in (t+1):n)
{
U <- U + (data[i]<=datainf[j])-(data[j]<=datainf[i])
}
}
U <- U/sqrt(n*t*(n-t))
V <- mean((cdf(datainf)+cdfinf(data-10^-10)-1)^2)
return(U^2/V)
}
data <- data.table(input)
ts3 <- sort(ts3)+1
ts3 <- c(ts3,nrow(data))
ts4 <- sort(ts4)+1
ts4 <- c(ts4,nrow(data))
rm(input)
View(data)
# load("resmod_prosulf2.Rdata")
# load("Station_app.Rdata")
# load("MultRank_RealData.Rdata")
# load("App_prosulfo.Rdata")
save(geo,
data,
map_eau,
map_reg_her,
ts5,
ts3,
ts4,
tstp_mod3,tstp_mod4,
tstrt_mod3,tstrt_mod4,
UStatcens,
file = "Data_prosulfocarb.Rdata")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data$d[1]
class(data$d[1])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x_value$sais_C <- c(1)
runApp()
shiny::runApp()
#      crops_frechet,
#      crops_weibull,
#      data,
#      geo,
#      map_eau,
#      map_reg_her,
#      ts5,
#      UStatcens,
#      file = "Data_prosulfocarb.Rdata")
############# pretraitement necessaire ##########
load("Data_prosulfocarb_2.Rdata")
#      crops_frechet,
#      crops_weibull,
#      data,
#      geo,
#      map_eau,
#      map_reg_her,
#      ts5,
#      UStatcens,
#      file = "Data_prosulfocarb.Rdata")
############# pretraitement necessaire ##########
load("Data_prosulfocarb_2.Rdata")
getwd()
############# pretraitement necessaire ##########
# load("Data_prosulfocarb_2.Rdata")
#load("new_map_eau.Rdata")
load("Prosulfo_appli.RData")
##### direction des rivières #####
# récupération d'un segment par cours d'eau
flow_dir <- map_eau[order(map_eau$ID_C_EAU),]
pos <- which(!is.na(flow_dir$ID_C_EAU))
flow_dir <- flow_dir[pos,]
pos <- summary(as.factor(flow_dir$ID_C_EAU),maxsum = length(unique(flow_dir$ID_C_EAU)))
pos <- as.numeric(pos)
pos <- cumsum(pos)
# pos1 : si l'on veut plus de segments par cours d'eau
# pos1 <- sort(c(pos-round(diff(c(1,pos))/2),pos))
flow_dir <- flow_dir[pos,]
flow_dir <- as.data.table(st_coordinates(x = flow_dir))
direction <- flow_dir %>% group_by(flow_dir$L1) %>% summarize(N = n())
direction <- cumsum(direction$N)
# on trace la flèche de direction entre le premier
# point du segment et le dernier point du segment
flow_dir <- flow_dir[sort(c(c(1,direction[-length(direction)]+1),direction)),]
#flow_dir <- flow_dir[sort(c(direction-1,direction)),]
flow_dir <- st_as_sf(x = flow_dir,coords = c(1,2))
st_crs(flow_dir) <- st_crs(map_eau)
flow_dir <- st_transform(x = flow_dir,crs = st_crs(map_reg_her))
runApp()
install.packages("ggmap")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Shiny/essai')
runApp()
runApp()
runApp()
runApp()
runApp()
############# pretraitement necessaire ##########
# load("Data_prosulfocarb_2.Rdata")
#load("new_map_eau.Rdata")
load("Prosulfo_appli.RData")
seq(min(input_max$d),max(input_max$d),by = "year")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
############# pretraitement necessaire ##########
# load("Data_prosulfocarb_2.Rdata")
#load("new_map_eau.Rdata")
load("Prosulfo_appli.RData")
############# pretraitement necessaire ##########
# load("Data_prosulfocarb_2.Rdata")
#load("new_map_eau.Rdata")
load("Prosulfo_appli.RData")
max(st_coordinates(map_reg)[,2])
runApp()
runApp()
g <- ggmap(ggmap = get_map(c(xmin,ymin,xmax,ymax)))
xmin <- min(st_coordinates(map_reg)[,1])
xmax <- max(st_coordinates(map_reg)[,1])
ymin <- min(st_coordinates(map_reg)[,2])
ymax <- max(st_coordinates(map_reg)[,2])
essai <- lapply(X = map_eau$geometry,"st_coordinates")
essai <- mapply("cbind",essai,1:length(essai))
essai <- lapply(X = essai,"as.data.frame")
essai <- bind_rows(essai,.id = essai$V5)
colnames(essai)[1:2] <- c("lon","lat")
g <- ggmap(ggmap = get_map(c(xmin,ymin,xmax,ymax)))
g <- g+geom_sf(data = map_reg_her,inherit.aes = FALSE,alpha = 0)
g <- g+geom_line(data=essai,
aes(x=lon, y=lat, group=V5),
col = "blue",alpha = 0.5,lwd = 0.5)+
xlab("Longitude")+ylab("Latitude")
g
essai
runApp()
runApp()
runApp()
runApp()
runApp()
############# pretraitement necessaire ##########
# load("Data_prosulfocarb_2.Rdata")
# load("new_map_eau.Rdata")
load("Prosulfo_appli.RData")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
############# pretraitement necessaire ##########
# load("Data_prosulfocarb_2.Rdata")
# load("new_map_eau.Rdata")
load("Prosulfo_appli.RData")
crops_weibull$beta
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
crops_weibull$beta
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lapply(crops_weibull$segments,FUN = "length")
crops_weibull$segments
runApp()
# for(i in 1:nrow(inf_map))
# {
#     inf_map[i,3] <- costfcpp(data = tb[tb$sta == inf_map[i,1],],tstart = 0,tstop = inf_map[i,2]-1,init = "mean",q_init = 0.5,k = 1/2,prec = 10^-8,Nmax = 100,lmax = 10)[1]
# }
# l_init <- costfcpp(data = input_max[,2:3],tstart = 0,tstop = crops_weibull$segments[[1]][1]-1,init = "mean",q_init = 0.5,k = 0.5,prec = 10^-8,Nmax = 100,lmax = 10)[2]
# Quantification <- as.factor(1-input_max$col)
# crops_exp$beta<-round(crops_exp$beta,2)
# crops_weibull$beta<-round(crops_weibull$beta,2)
# crops_frechet$beta<-round(crops_frechet$beta,2)
K_l50 <- unlist(lapply(crops_weibull$segments,FUN = "length"))
crops_weibull$cost <- crops_weibull$cost[-which(duplicated(K_l50))]
crops_weibull$beta <- crops_weibull$beta[-which(duplicated(K_l50))]
crops_weibull$segments <- crops_weibull$segments[-which(duplicated(K_l50))]
crops_weibull
############# pretraitement necessaire ##########
# load("Data_prosulfocarb_2.Rdata")
# load("new_map_eau.Rdata")
load("Prosulfo_appli.RData")
K_l50 <- unlist(lapply(crops_weibull$segments,FUN = "length"))
K_l50 <- K_l50[-which(duplicated(K_l50))]
slope <- rep(NA,length(K_l50)-2)
length(K_l50)
K_l50 <- unlist(lapply(crops_weibull$segments,FUN = "length"))
slope <- rep(NA,length(K_l50)-2)
for(i in 2:(length(K_l50)-1))
{
ml1 <- lm(crops_weibull$cost[1:i]~K_l50[1:i])
ml2 <- lm(crops_weibull$cost[(i):length(K_l50)]~K_l50[(i):length(K_l50)])
slope[i-1] <- sum((ml1$residuals)^2)+sum((ml2$residuals)^2)
}
K_star <- (2:length(K_l50))[which.min(slope)]
K_star
ml1 <- lm(crops_weibull$cost[1:K_star]~K_l50[1:K_star])
ml2 <- lm(crops_weibull$cost[K_star:length(K_l50)]~K_l50[K_star:length(K_l50)])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
crops_weibull
############# pretraitement necessaire ##########
# load("Data_prosulfocarb_2.Rdata")
# load("new_map_eau.Rdata")
load("Prosulfo_appli.RData")
runApp()
runApp()
crops_weibull
K_l150
K_l50
runApp()
runApp()
crops_weibull$beta
############# pretraitement necessaire ##########
# load("Data_prosulfocarb_2.Rdata")
# load("new_map_eau.Rdata")
load("Prosulfo_appli.RData")
crops_weibull$beta
runApp()
runApp()
runApp()
pen = 2.34
crops_weibull$segments[[max(which(crops_weibull$beta<=pen+10^-5))]]
runApp()
runApp()
runApp()
crops_weibull$beta
crops_weibull$beta+1
runApp()
runApp()
max(which(crops_weibull$beta <= pen + 10^-5))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
crops_weibull$beta
runApp()
pen
crops_weibull$beta<=input$pen+10^-5)
crops_weibull$beta<=input$pen+10^-5))
crops_weibull$beta<=input$pen+10^-5
crops_weibull$beta<=pen+10^-5
which(crops_weibull$beta<=input$pen+10^-5))
which(crops_weibull$beta<=input$pen+10^-5)
which(crops_weibull$beta<=pen+10^-5)
length(which(crops_weibull$beta<=input$pen+10^-5)) == 0
length(which(crops_weibull$beta<=pen+10^-5)) == 0
max(which(crops_weibull$beta<=pen))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
